{"version":3,"sources":["logo.svg","fetchApi/fetchApi.js","store/actions.js","store/actionTypes.js","App.js","serviceWorker.js","store/reducer.js","store/saga.js","store/store.js","index.js"],"names":["module","exports","getUser","url","axios","get","fetchUserIncrementalSuccess","payload","type","sagaFetchUserSuccess","App","dispatch","useDispatch","useState","userID","setUserID","isExpensiveTaskRunning","useSelector","state","incrementUserID","className","style","fontSize","src","logo","alt","Grid","container","direction","justify","alignItems","spacing","item","Button","variant","color","component","onClick","then","response","data","actions","catch","error","console","firstUserUrl","secondUserUrl","Boolean","window","location","hostname","match","updateObject","oldObject","updatedObject","initialState","isLoading","users","getUsersInit","newState","getUsersSuccess","cloneDeep","concat","getUsersFail","sagaGetUsersInit","sagaGetUsersSuccess","sagaGetUsersFail","expensiveTaskInit","expensiveTaskStop","reducer","action","fetchUser","fetchUserSaga","fetchUserWithTimeout","fetchUserWithTimeOutSaga","logger","watchAndLog","watchFirstThreeFetches","fetchFlow","fetchTwoUsersRace","fetchTwoUsersRaceSaga","expensiveFunction","expensiveTaskSaga","rootSaga","call","user","put","takeEvery","race","delay","timeout","log","select","i","take","firstUser","secondUser","cancelled","fork","expensiveTask","cancel","spawn","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleWare","createSagaMiddleware","store","createStore","fetchUserReducer","applyMiddleware","thunk","run","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9033689e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nexport const getUser = (url) => {\r\n  return axios.get(url);\r\n};\r\n\r\nexport default getUser;\r\n","import * as actionTypes from \"./actionTypes.js\";\r\nimport { getUser } from \"../fetchApi/fetchApi.js\";\r\n\r\nexport const fetchUserIncrementalInit = () => {\r\n  return {\r\n    type: actionTypes.FETCH_USER_INCREMENTAL_INIT,\r\n  };\r\n};\r\n\r\nexport const fetchUserIncrementalSuccess = (payload) => {\r\n  return {\r\n    type: actionTypes.FETCH_USER_INCREMENTAL_SUCCESS,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const fetchUserIncrementalFail = () => {\r\n  return {\r\n    type: actionTypes.FETCH_USER_INCREMENTAL_FAIL,\r\n  };\r\n};\r\n\r\nexport const sagaFetchUserInit = (payload) => {\r\n  return {\r\n    type: actionTypes.SAGA_FETCH_USER_INIT,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const sagaFetchUserSuccess = (payload) => {\r\n  return {\r\n    type: actionTypes.SAGA_FETCH_USER_SUCCESS,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const sagaFetchUserFail = () => {\r\n  return {\r\n    type: actionTypes.SAGA_FETCH_USER_FAIL,\r\n  };\r\n};\r\n\r\nexport const thunkFetchUser = (url) => (dispatch) => {\r\n  dispatch(fetchUserIncrementalInit());\r\n  getUser(url)\r\n    .then((response) => {\r\n      const { data } = response;\r\n      dispatch(fetchUserIncrementalSuccess(data));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(fetchUserIncrementalFail());\r\n      console.error(error);\r\n    });\r\n};\r\n\r\nexport const fetchUserWithTimeoutInit = (payload) => {\r\n  return {\r\n    type: actionTypes.SAGA_FETCH_USER_WITH_TIMEOUT_INIT,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const fetchUserTimeoutError = () => {\r\n  return {\r\n    type: actionTypes.SAGA_FETCH_USER_TIMEOUT_ERROR,\r\n  };\r\n};\r\n\r\nexport const fetchTwoUsersRace = (payload) => {\r\n  return {\r\n    type: actionTypes.SAGA_FETCH_TWO_USERS_RACE,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const notifyFirstUserWin = () => {\r\n  return {\r\n    type: actionTypes.FIRST_USER_WINS,\r\n  };\r\n};\r\n\r\nexport const notifySecondUserWin = () => {\r\n  return {\r\n    type: actionTypes.SECOND_USER_WINS,\r\n  };\r\n};\r\n\r\nexport const expensiveTaskInit = () => {\r\n  return { type: actionTypes.EXPENSIVE_TASK_INIT };\r\n};\r\n\r\nexport const expensiveTaskCancel = () => {\r\n  return { type: actionTypes.EXPENSIVE_TASK_CANCEL };\r\n};\r\n\r\nexport const expensiveTaskCompleted = () => {\r\n  return { type: actionTypes.EXPENSIVE_TASK_COMPLETED };\r\n};\r\n\r\nexport const expensiveTaskCanceled = () => {\r\n  return { type: actionTypes.EXPENSIVE_TASK_CANCELED };\r\n};\r\n","export const FETCH_USER_INCREMENTAL_INIT = \"FETCH_USER_INCREMENTAL_INIT\";\r\nexport const FETCH_USER_INCREMENTAL_SUCCESS = \"FETCH_USER_INCREMENTAL_SUCCESS\";\r\nexport const FETCH_USER_INCREMENTAL_FAIL = \"FETCH_USER_INCREMENTAL_FAIL\";\r\n\r\nexport const SAGA_FETCH_USER_INIT = \"SAGA_FETCH_USER_INIT\";\r\nexport const SAGA_FETCH_USER_SUCCESS = \"SAGA_FETCH_USER_SUCCESS\";\r\nexport const SAGA_FETCH_USER_FAIL = \"SAGA_FETCH_USER_FAIL\";\r\n\r\nexport const SAGA_FETCH_USER_WITH_TIMEOUT_INIT =\r\n  \"SAGA_FETCH_USER_WITH_TIMEOUT_INIT\";\r\nexport const SAGA_FETCH_USER_TIMEOUT_ERROR = \"SAGA_FETCH_USER_TIMEOUT_ERROR\";\r\n\r\nexport const SAGA_FETCH_TWO_USERS_RACE = \"SAGA_FETCH_TWO_USERS_RACE\";\r\nexport const FIRST_USER_WINS = \"FIRST_USER_WINS\";\r\nexport const SECOND_USER_WINS = \"SECOND_USER_WINS\";\r\n\r\nexport const EXPENSIVE_TASK_INIT = \"EXPENSIVE_TASK_INIT\";\r\nexport const EXPENSIVE_TASK_COMPLETED = \"EXPENSIVE_TASK_COMPLETED\";\r\nexport const EXPENSIVE_TASK_CANCEL = \"EXPENSIVE_TASK_CANCEL\";\r\nexport const EXPENSIVE_TASK_CANCELED = \"EXPENSIVE_TASK_CANCELED\";\r\n","import React, { useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as actions from \"./store/actions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const [userID, setUserID] = useState(1);\r\n  const isExpensiveTaskRunning = useSelector(\r\n    (state) => state.isExpensiveTaskRunning\r\n  );\r\n  const url = `https://jsonplaceholder.typicode.com/todos/${userID}`;\r\n\r\n  const incrementUserID = () => {\r\n    const newUserID = userID === 2 ? 1 : userID + 1;\r\n    setUserID(newUserID);\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    dispatch(actions.fetchUserIncrementalInit());\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        const { data } = response;\r\n        dispatch(actions.fetchUserIncrementalSuccess(data));\r\n        incrementUserID();\r\n      })\r\n      .catch((error) => {\r\n        dispatch(actions.fetchUserIncrementalFail());\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const handleThunkButtonClick = () => {\r\n    dispatch(actions.thunkFetchUser(url));\r\n    incrementUserID();\r\n  };\r\n\r\n  const handleSagaButtonClick = () => {\r\n    dispatch(actions.sagaFetchUserInit(url));\r\n    incrementUserID();\r\n  };\r\n\r\n  const handleSagaButtonClickWithTimeout = () => {\r\n    dispatch(actions.fetchUserWithTimeoutInit(url));\r\n    incrementUserID();\r\n  };\r\n\r\n  const handleFetchTwoUsersRace = () => {\r\n    const payLoad = {\r\n      firstUserUrl: \"https://jsonplaceholder.typicode.com/todos/1\",\r\n      secondUserUrl: \"https://jsonplaceholder.typicode.com/todos/2\",\r\n    };\r\n    dispatch(actions.fetchTwoUsersRace(payLoad));\r\n  };\r\n\r\n  const handleExpensiveTask = () => {\r\n    if (!isExpensiveTaskRunning) {\r\n      dispatch(actions.expensiveTaskInit());\r\n    } else {\r\n      dispatch(actions.expensiveTaskCancel());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>As a general rule of thumb:</p>\r\n        <div style={{ fontSize: 18 }}>\r\n          <p>\r\n            Thunks are best for complex synchronous logic (especially code that\r\n            needs access to the entire Redux store state), and simple async\r\n            logic (like basic AJAX calls). With the use of async/await, it can\r\n            be reasonable to use thunks for some more complex promise-based\r\n            logic as well.\r\n          </p>\r\n          <br />\r\n          <p>\r\n            Sagas are best for complex async logic and decoupled \"background\r\n            thread\"-type behavior, especially if you need to listen to\r\n            dispatched actions (which is something that can't be done with\r\n            thunks). They require familiarity with ES6 generator functions and\r\n            redux-saga's \"effects\" operators.\r\n          </p>\r\n          <br />\r\n          <p>\r\n            Observables solve the same problems as sagas, but rely on RxJS to\r\n            implement async behavior. They require familiarity with the RxJS\r\n            API.\r\n          </p>\r\n        </div>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={3}\r\n        >\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={handleButtonClick}\r\n            >\r\n              Fetch User\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={handleThunkButtonClick}\r\n            >\r\n              Fetch User (thunk)\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={handleSagaButtonClick}\r\n            >\r\n              Fetch User (saga)\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={handleSagaButtonClickWithTimeout}\r\n            >\r\n              Fetch User (saga + timeout)\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={handleFetchTwoUsersRace}\r\n            >\r\n              Fetch Two Users (saga + race)\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              onClick={handleExpensiveTask}\r\n            >\r\n              {isExpensiveTaskRunning\r\n                ? \"stop expensive task\"\r\n                : \"start expensive task\"}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"./actionTypes.js\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { expensiveTaskCancel } from \"./actions.js\";\r\n\r\nconst updateObject = (oldObject, updatedObject) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedObject,\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  users: [],\r\n  isExpensiveTaskRunning: false,\r\n};\r\n\r\n// NORMAL\r\n\r\nconst getUsersInit = (state) => {\r\n  const newState = { ...state };\r\n  newState.isLoading = true;\r\n\r\n  return updateObject(state, newState);\r\n};\r\n\r\nconst getUsersSuccess = (state, payload) => {\r\n  const newState = cloneDeep(state);\r\n  newState.users = newState.users.concat([payload]);\r\n  newState.isLoading = false;\r\n\r\n  return updateObject(state, newState);\r\n};\r\n\r\nconst getUsersFail = (state) => {\r\n  const newState = cloneDeep(state);\r\n  newState.isLoading = false;\r\n  newState.users = [];\r\n\r\n  return updateObject(state, newState);\r\n};\r\n\r\n// SAGA\r\n\r\nconst sagaGetUsersInit = (state) => {\r\n  const newState = { ...state };\r\n  newState.isLoading = true;\r\n\r\n  return updateObject(state, newState);\r\n};\r\n\r\nconst sagaGetUsersSuccess = (state, payload) => {\r\n  const newState = cloneDeep(state);\r\n  newState.users = newState.users.concat([payload]);\r\n  newState.isLoading = false;\r\n\r\n  return updateObject(state, newState);\r\n};\r\n\r\nconst sagaGetUsersFail = (state) => {\r\n  const newState = cloneDeep(state);\r\n  newState.isLoading = false;\r\n  newState.users = [];\r\n\r\n  return updateObject(state, newState);\r\n};\r\n\r\nconst expensiveTaskInit = (state) => {\r\n  return updateObject(state, { isExpensiveTaskRunning: true });\r\n};\r\n\r\nconst expensiveTaskStop = (state) => {\r\n  return updateObject(state, { isExpensiveTaskRunning: false });\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_USER_INCREMENTAL_INIT:\r\n      return getUsersInit(state);\r\n    case actionTypes.FETCH_USER_INCREMENTAL_SUCCESS:\r\n      return getUsersSuccess(state, action.payload);\r\n    case actionTypes.FETCH_USER_INCREMENTAL_FAIL:\r\n      return getUsersFail(state);\r\n\r\n    case actionTypes.SAGA_FETCH_USER_INIT:\r\n      return sagaGetUsersInit(state);\r\n    case actionTypes.SAGA_FETCH_USER_SUCCESS:\r\n      return sagaGetUsersSuccess(state, action.payload);\r\n    case actionTypes.SAGA_FETCH_USER_FAIL:\r\n      return sagaGetUsersFail();\r\n\r\n    case actionTypes.EXPENSIVE_TASK_INIT:\r\n      return expensiveTaskInit(state);\r\n    case actionTypes.EXPENSIVE_TASK_COMPLETED:\r\n      return expensiveTaskStop(state);\r\n    case actionTypes.EXPENSIVE_TASK_CANCEL:\r\n      return expensiveTaskStop(state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import {\r\n  call,\r\n  put,\r\n  takeEvery,\r\n  spawn,\r\n  select,\r\n  take,\r\n  race,\r\n  delay,\r\n  cancel,\r\n  fork,\r\n  cancelled,\r\n} from \"redux-saga/effects\";\r\nimport { getUser } from \"../fetchApi/fetchApi.js\";\r\nimport * as actions from \"./actions\";\r\nimport * as actionTypes from \"./actionTypes\";\r\n\r\n// worker, will be started on SAGA_FETCH_USER_INIT\r\n\r\nexport function* fetchUser(action) {\r\n  const { payload: url } = action;\r\n  try {\r\n    const user = yield call(getUser, url);\r\n    yield put(actions.sagaFetchUserSuccess(user.data));\r\n  } catch (error) {\r\n    yield put(actions.sagaFetchUserFail());\r\n  }\r\n}\r\n\r\nexport function* fetchUserSaga() {\r\n  yield takeEvery(actionTypes.SAGA_FETCH_USER_INIT, fetchUser);\r\n}\r\n\r\nexport function* fetchUserWithTimeout(action) {\r\n  const { payload: url } = action;\r\n  try {\r\n    const { user, timeout } = yield race({\r\n      user: yield call(getUser, url),\r\n      timeout: delay(1000),\r\n    });\r\n    if (user) {\r\n      console.log(\"no timeout\");\r\n      yield put(actions.sagaFetchUserSuccess(user.data));\r\n    }\r\n    if (timeout) {\r\n      console.log(\"timeout\");\r\n      yield put(actions.fetchUserTimeoutError());\r\n    }\r\n  } catch (error) {\r\n    yield put(actions.sagaFetchUserFail());\r\n  }\r\n}\r\n\r\nexport function* fetchUserWithTimeOutSaga() {\r\n  yield takeEvery(\r\n    actionTypes.SAGA_FETCH_USER_WITH_TIMEOUT_INIT,\r\n    fetchUserWithTimeout\r\n  );\r\n}\r\n\r\nfunction* logger(action) {\r\n  const state = yield select();\r\n  console.log(\"[logger] action\", action);\r\n  console.log(\"[logger] state after\", state);\r\n}\r\n\r\nfunction* watchAndLog() {\r\n  yield takeEvery(\"*\", logger);\r\n}\r\n\r\nfunction* watchFirstThreeFetches() {\r\n  for (let i = 0; i < 3; i++) {\r\n    yield take(actionTypes.SAGA_FETCH_USER_SUCCESS);\r\n  }\r\n  console.log(\r\n    \"[watchFirstThreeFetches] The three first users where successfully fetched\"\r\n  );\r\n}\r\n\r\nfunction* fetchFlow() {\r\n  while (true) {\r\n    yield take(actionTypes.SAGA_FETCH_USER_INIT);\r\n    console.log(\"[fetchFlow] initialized fetching\");\r\n    yield take(actionTypes.SAGA_FETCH_USER_SUCCESS);\r\n    console.log(\"[fetchFlow] fetching success\");\r\n    yield take(actionTypes.SAGA_FETCH_USER_FAIL);\r\n    console.log(\"[fetchFlow] fetching error\");\r\n  }\r\n}\r\n\r\nfunction* fetchTwoUsersRace(action) {\r\n  const { payload } = action;\r\n  const { firstUserUrl } = payload;\r\n  const { secondUserUrl } = payload;\r\n\r\n  const { firstUser, secondUser } = yield race({\r\n    firstUser: yield call(getUser, firstUserUrl),\r\n    secondUser: yield call(getUser, secondUserUrl),\r\n  });\r\n  if (firstUser) {\r\n    yield put(actions.notifyFirstUserWin());\r\n    yield put(actions.sagaFetchUserSuccess(firstUser.data));\r\n  }\r\n  if (secondUser) {\r\n    yield put(actions.notifySecondUserWin());\r\n    yield put(actions.sagaFetchUserSuccess(secondUser.data));\r\n  }\r\n}\r\n\r\nfunction* fetchTwoUsersRaceSaga() {\r\n  yield takeEvery(actionTypes.SAGA_FETCH_TWO_USERS_RACE, fetchTwoUsersRace);\r\n}\r\n\r\nfunction* expensiveFunction() {\r\n  try {\r\n    yield delay(3000);\r\n    yield put(actions.expensiveTaskCompleted());\r\n  } finally {\r\n    if (yield cancelled()) {\r\n      yield put(actions.expensiveTaskCanceled());\r\n    }\r\n  }\r\n}\r\n\r\nfunction* expensiveTaskSaga() {\r\n  while (yield take(actionTypes.EXPENSIVE_TASK_INIT)) {\r\n    const expensiveTask = yield fork(expensiveFunction);\r\n\r\n    yield take(actionTypes.EXPENSIVE_TASK_CANCEL);\r\n    yield cancel(expensiveTask);\r\n  }\r\n}\r\n\r\nfunction* rootSaga() {\r\n  yield spawn(fetchUserSaga);\r\n  yield spawn(fetchUserWithTimeOutSaga);\r\n  yield spawn(watchAndLog);\r\n  yield spawn(watchFirstThreeFetches);\r\n  yield spawn(fetchFlow);\r\n  yield spawn(fetchTwoUsersRaceSaga);\r\n  yield spawn(expensiveTaskSaga);\r\n}\r\n\r\nexport default rootSaga;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport fetchUserReducer from \"./reducer.js\";\r\nimport rootSaga from \"./saga\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst sagaMiddleWare = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  fetchUserReducer,\r\n  composeEnhancers(applyMiddleware(sagaMiddleWare, thunk))\r\n);\r\n\r\nsagaMiddleWare.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store.js\";\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}